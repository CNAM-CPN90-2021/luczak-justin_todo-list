{"ast":null,"code":"import _slicedToArray from\"/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/github/github/luczak-justin_todo-list/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useStorage}from'@capacitor-community/react-hooks/storage';import{useEffect,useState}from'react';export function useToDoList(){// import des fonctions de stockage local\nvar _useStorage=useStorage(),get=_useStorage.get,set=_useStorage.set,remove=_useStorage.remove;// déclaration de la liste d'items\nvar listStocked=[];var _useState=useState(listStocked),_useState2=_slicedToArray(_useState,2),listItems=_useState2[0],updateList=_useState2[1];// compteur tâches à faire\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),counterTodo=_useState4[0],setCounterTodo=_useState4[1];// fonction pour initialiser le compteur d'items non cochés et synchroniser les données stockées en local\nfunction getCounterTodo(){get('counterTodo').then(function(number){if(number!=null){setCounterTodo(parseInt(number));}else{setCounterTodo(0);}});}// hook pour utiliser la fonction une seule fois lors de l'affichage de la page\nuseEffect(function(){getCounterTodo();},[]);// fonction pour ajouter 1 au compteur\nfunction addCounterTodo(){var count=counterTodo;count=count+1;setCounterTodo(count);set('counterTodo',JSON.stringify(count));}// fonction pour enelever 1 au compteur\nfunction removeCounterTodo(){var count=counterTodo;count=count-1;setCounterTodo(count);set('counterTodo',JSON.stringify(count));}// fonction pour initialiser la liste stockées en local\nfunction getStockedList(){get('listTodo').then(function(listJson){if(listJson!=null){listStocked=JSON.parse(listJson);updateList(listStocked);}});}// appeler la fonction une seule fois pour initialiser les items stockés en local\nuseEffect(function(){getStockedList();},[]);// fonction pour ajouter des items à la liste\nfunction addItem(text){// on prépare l'id pour le nouvel objet en prenant le dernier id du tableau actuel et on retire 1 pour débuter à la bonne valeur \nvar lengthList=listItems.length-1;var newItem={id:lengthList+1,text:text,checked:false};// on stocke le nouveau tableau avec le nouvel item dans une variable pour l'utiliser dans la fonction update après\nvar newTable=listItems.concat([newItem]);// on ajoute 1 au compteur lors de la création d'une tâche\naddCounterTodo();// on ajoute le nouveau tableau au sotckage en local\nset('listTodo',JSON.stringify(newTable));// on update la liste en mémoire\nupdateList(newTable);}// fonction pour retirer manuellement une tâche\nfunction removeItem(id){// on copie la liste afin de pouvoir la manipuler\nvar newList=listItems;// on vérifie si l'item est coché ou non\nif(newList[id].checked===false){// on enlève 1 au compteur\nremoveCounterTodo();}// on supprime l'item voulu dans la nouvelle liste\ndelete newList[id];// on ajoute les nouvelles valeurs dans le tableau stocké en local\nset('listTodo',JSON.stringify(newList));// on update les nouvelles valeurs en mémoire\nupdateList(newList);}// fonction pour modifier le texte d'un item\nfunction modifieItem(id,text){// on copie la liste pour pouvoir la modifier\nvar newList=listItems;// on attribut la nouvelle valeur du text à la nouvelle liste\nnewList[id].text=text;// on ajoute les nouvelles valeurs dans le tableau stocké en local\nset('listTodo',JSON.stringify(newList));// on update les nouvelles valeurs en mémoire\nupdateList(newList);}// fonction pour passer un item de coché à non coché et inversement\nfunction toggleItem(id){var updatedList=listItems.map(function(item){if(item!=undefined&&item.id===id){item.checked=!item.checked;}return item;});// on ajoute les nouvelles valeurs dans le tableau stocké en local\nset('listTodo',JSON.stringify(updatedList));// on update les nouvelles valeurs en mémoire\nupdateList(updatedList);}// fonction pour retirer tous les items de la liste\nfunction removeAllItems(){// on enlève la liste stockée en local\nremove('listTodo');// on vide la liste stockée en mémoire\nupdateList([]);// on enlève le compteur stocké en local\nset('counterTodo',JSON.stringify(0));// on réinitialise le compteur en mémoire\nsetCounterTodo(0);}return{listItems:listItems,addItem:addItem,toggleItem:toggleItem,removeAllItems:removeAllItems,counterTodo:counterTodo,setCounterTodo:setCounterTodo,removeCounterTodo:removeCounterTodo,addCounterTodo:addCounterTodo,removeItem:removeItem,modifieItem:modifieItem};}","map":{"version":3,"sources":["/Users/justinluczak/Documents/COURS CNAM 2EME ANNEE/webmobile/github/github/luczak-justin_todo-list/src/hooks/useToDoList.ts"],"names":["useStorage","useEffect","useState","useToDoList","get","set","remove","listStocked","listItems","updateList","counterTodo","setCounterTodo","getCounterTodo","then","number","parseInt","addCounterTodo","count","JSON","stringify","removeCounterTodo","getStockedList","listJson","parse","addItem","text","lengthList","length","newItem","id","checked","newTable","concat","removeItem","newList","modifieItem","toggleItem","updatedList","map","item","undefined","removeAllItems"],"mappings":"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","sourcesContent":["import { useStorage } from '@capacitor-community/react-hooks/storage';\nimport { useEffect, useState } from 'react';\n\n\nexport function useToDoList() {\n\n    // import des fonctions de stockage local\n    const { get, set, remove } = useStorage();\n\n    // déclaration de la liste d'items\n    let listStocked = [];\n    let [listItems, updateList] = useState(listStocked);\n\n    // compteur tâches à faire\n    let [counterTodo, setCounterTodo] = useState(0);\n\n    // fonction pour initialiser le compteur d'items non cochés et synchroniser les données stockées en local\n    function getCounterTodo() {\n        get('counterTodo').then((number) => {\n            if (number != null) {\n                setCounterTodo(parseInt(number))\n            }\n            else {\n                setCounterTodo(0)\n            }\n        })\n    }\n\n    // hook pour utiliser la fonction une seule fois lors de l'affichage de la page\n    useEffect(() => {\n        getCounterTodo()\n    }, [])\n\n    // fonction pour ajouter 1 au compteur\n    function addCounterTodo() {\n        let count = counterTodo\n        count = count + 1\n        setCounterTodo(count)\n        set('counterTodo', JSON.stringify(count))\n    }\n\n    // fonction pour enelever 1 au compteur\n    function removeCounterTodo() {\n        let count = counterTodo\n        count = count - 1\n        setCounterTodo(count)\n        set('counterTodo', JSON.stringify(count))\n    }\n\n    // fonction pour initialiser la liste stockées en local\n    function getStockedList() {\n        get('listTodo').then((listJson) => {\n            if (listJson != null) {\n                listStocked = JSON.parse(listJson);\n\n                updateList(listStocked)\n            }\n        })\n    }\n\n    // appeler la fonction une seule fois pour initialiser les items stockés en local\n    useEffect(() => {\n        getStockedList()\n    }, [])\n\n    // fonction pour ajouter des items à la liste\n    function addItem(text) {\n\n        // on prépare l'id pour le nouvel objet en prenant le dernier id du tableau actuel et on retire 1 pour débuter à la bonne valeur \n        let lengthList = listItems.length - 1\n\n        const newItem = {\n            id: lengthList + 1,\n            text: text,\n            checked: false\n        }\n\n        // on stocke le nouveau tableau avec le nouvel item dans une variable pour l'utiliser dans la fonction update après\n        const newTable = listItems.concat([newItem])\n\n        // on ajoute 1 au compteur lors de la création d'une tâche\n        addCounterTodo()\n\n        // on ajoute le nouveau tableau au sotckage en local\n        set('listTodo', JSON.stringify(newTable))\n\n        // on update la liste en mémoire\n        updateList(newTable)\n    }\n\n    // fonction pour retirer manuellement une tâche\n    function removeItem(id) {\n        // on copie la liste afin de pouvoir la manipuler\n        let newList = listItems\n\n        // on vérifie si l'item est coché ou non\n        if (newList[id].checked === false) {\n            // on enlève 1 au compteur\n            removeCounterTodo();\n        }\n\n        // on supprime l'item voulu dans la nouvelle liste\n        delete newList[id]\n\n        // on ajoute les nouvelles valeurs dans le tableau stocké en local\n        set('listTodo', JSON.stringify(newList))\n\n        // on update les nouvelles valeurs en mémoire\n        updateList(newList)\n    }\n\n    // fonction pour modifier le texte d'un item\n    function modifieItem(id, text) {\n        // on copie la liste pour pouvoir la modifier\n        let newList = listItems\n        // on attribut la nouvelle valeur du text à la nouvelle liste\n        newList[id].text = text\n\n        // on ajoute les nouvelles valeurs dans le tableau stocké en local\n        set('listTodo', JSON.stringify(newList))\n\n        // on update les nouvelles valeurs en mémoire\n        updateList(newList)\n    }\n\n    // fonction pour passer un item de coché à non coché et inversement\n    function toggleItem(id) {\n        const updatedList = listItems.map(item => {\n            if (item != undefined && item.id === id) {\n                item.checked = !item.checked\n            }\n            return item\n        })\n\n        // on ajoute les nouvelles valeurs dans le tableau stocké en local\n        set('listTodo', JSON.stringify(updatedList))\n\n        // on update les nouvelles valeurs en mémoire\n        updateList(updatedList)\n    }\n\n    // fonction pour retirer tous les items de la liste\n    function removeAllItems() {\n\n        // on enlève la liste stockée en local\n        remove('listTodo');\n\n        // on vide la liste stockée en mémoire\n        updateList([]);\n\n        // on enlève le compteur stocké en local\n        set('counterTodo', JSON.stringify(0));\n\n        // on réinitialise le compteur en mémoire\n        setCounterTodo(0);\n    }\n\n\n    return {\n        listItems, addItem, toggleItem, removeAllItems, counterTodo, setCounterTodo, removeCounterTodo, addCounterTodo, removeItem, modifieItem\n    }\n\n}"]},"metadata":{},"sourceType":"module"}